datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Node {
  id                BigInt  @id @default(autoincrement()) @db.BigInt
  value             Json?
  mutable           Boolean @default(false)
  immutableChecksum String? @unique

  nameLinks   NameLink[] @relation(name: "NameLinkOn")
  nameLinksTo NameLink[] @relation(name: "NameLinkTo")
  links       TypeLink[] @relation(name: "TypeLinkFrom")
  linksTo     TypeLink[] @relation(name: "TypeLinkTo")
  linksOfType TypeLink[] @relation(name: "TypeLinkType")
}

model TypeLink {
  id     BigInt @id @default(autoincrement()) @db.BigInt
  weight BigInt

  from   Node   @relation(fields: [fromId], references: [id], name: "TypeLinkFrom")
  fromId BigInt @db.BigInt
  type   Node   @relation(fields: [typeId], references: [id], name: "TypeLinkType")
  typeId BigInt @db.BigInt
  to     Node   @relation(fields: [toId], references: [id], name: "TypeLinkTo")
  toId   BigInt @db.BigInt

  @@unique([fromId, typeId, toId])
}

model NameLink {
  name   String
  weight BigInt

  on   Node   @relation(fields: [onId], references: [id], name: "NameLinkOn")
  onId BigInt @db.BigInt
  to   Node   @relation(fields: [toId], references: [id], name: "NameLinkTo")
  toId BigInt @db.BigInt

  @@unique([onId, name])
}

model User {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  username       String   @unique
  email          String   @unique
  role           String   @default("USER")
  name           String?
  hashedPassword String?
  publicBio      String?
  billing        Json?

  Comment         Comment[]
  Sites           Site[]
  EmailValidation EmailValidation[]
  VerifiedEmail   VerifiedEmail[]
  SiteRole        SiteRole[]
  NodeRole        NodeRole[]
  SiteInvite      SiteRoleInvitation[] @relation("InviteSenderRelation")
  SiteInviteSent  SiteRoleInvitation[] @relation("InviteRecipientRelation")
  DeviceToken     DeviceToken[]
  SiteEvent       SiteEvent[]
  BillingEvent    BillingEvent[]
  tokens          Token[]
  sessions        Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model BillingEvent {
  id      String   @id @default(uuid())
  time    DateTime
  type    String
  payload Json?
  userId  String?
  user    User?    @relation(fields: [userId], references: [id])
}

model DeviceToken {
  id          String    @id @default(uuid())
  token       String    @unique
  type        String?
  name        String
  requestTime DateTime  @default(now())
  approveTime DateTime?
  originIp    String?
  userId      String?
  user        User?     @relation(fields: [userId], references: [id])
}

model EmailValidation {
  id        String   @id @default(uuid())
  emailTime DateTime @default(now())
  email     String
  secret    String   @unique
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model VerifiedEmail {
  email      String   @id
  verifyTime DateTime @default(now())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model PhoneValidation {
  id       String   @id @default(uuid())
  sendTime DateTime @default(now())
  phone    String
  secret   String   @unique
}

model Comment {
  id          String   @id @default(uuid())
  publishTime DateTime @default(now())
  page        String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  message     String
}

model Site {
  id                 String               @id @default(uuid())
  name               String               @unique
  ownerId            String
  owner              User                 @relation(fields: [ownerId], references: [id])
  schema             Json?
  SiteNode           SiteNode[]
  SiteRole           SiteRole[]
  SiteRoleInvitation SiteRoleInvitation[]
  SiteToken          SiteToken[]
  SiteEvent          SiteEvent[]
}

model SiteNode {
  id            String     @id @default(uuid())
  key           String
  siteId        String
  site          Site       @relation(fields: [siteId], references: [id])
  parentNodeId  String?
  parentNode    SiteNode?  @relation(fields: [parentNodeId], references: [id])
  schema        Json?
  value         Json?
  version       Int        @default(0)
  schemaVersion Int        @default(0)
  versionTime   DateTime?
  SiteNode      SiteNode[] @relation("SiteNodeToSiteNode")

  NodeRole NodeRole[]

  SiteEvent SiteEvent[]
  @@unique([siteId, key, parentNodeId], name: "SiteNodeId")
}

model SiteEvent {
  id           String    @id @default(uuid())
  requestTime  DateTime  @default(now())
  completeTime DateTime  @default(now())
  eventName    String
  address      String[]
  siteId       String
  site         Site      @relation(fields: [siteId], references: [id])
  payload      Json?
  userId       String?
  user         User?     @relation(fields: [userId], references: [id])
  siteNodeId   String?
  siteNode     SiteNode? @relation(fields: [siteNodeId], references: [id])
}

model HostEvent {
  id       String   @id @default(uuid())
  saveTime DateTime @default(now())
  host     String
  events   Json
}

model SiteToken {
  id         String   @id @default(uuid())
  createTime DateTime @default(now())
  siteId     String
  site       Site     @relation(fields: [siteId], references: [id])
  label      String
  type       String
  token      String   @unique
}

model NodeRole {
  id         String   @id @default(uuid())
  siteNodeId String
  siteNode   SiteNode @relation(fields: [siteNodeId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
}

model SiteRole {
  id     String @id @default(uuid())
  siteId String
  site   Site   @relation(fields: [siteId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])
  name   String

  @@unique([siteId, userId], name: "SiteRoleUnique")
}

model SiteRoleInvitation {
  id              String    @id @default(uuid())
  inviteTime      DateTime  @default(now())
  siteId          String
  site            Site      @relation(fields: [siteId], references: [id])
  recipientUserId String?
  recipientUser   User?     @relation("InviteRecipientRelation", fields: [recipientUserId], references: [id])
  fromUserId      String
  fromUser        User      @relation("InviteSenderRelation", fields: [fromUserId], references: [id])
  acceptedTime    DateTime?
  dismissTime     DateTime?
  name            String // this is the eventual SiteRole.name
  toEmail         String?

  @@unique([siteId, recipientUserId, toEmail], name: "SiteRoleInviteUnique")
}
